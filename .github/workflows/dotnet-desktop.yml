name: .NET Core Build and release

on:
  push:
    tags:
      - "v*"
    branches:
      - master

jobs:

  build:
    name: Build and test

    strategy:
      matrix:
        configuration: [Debug, Release]
        platform: [x86, x64]

    runs-on: windows-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}

    env:
      Solution_Name: .\OperationalResearch.sln
      Test_Project_Path: .\OperationalResearchTest\OperationalResearchTest.csproj
      Wap_Project_Directory: .\OperationalResearchWAP
      Wap_Project_Path: .\OperationalResearchWAP\OperationalResearchWAP.wapproj

      App_Packages_Directory: AppPackages
      App_Packages_Archive: ${{ matrix.configuration }}-${{ matrix.platform }}.zip
      
      Msix_Package_Display_Name: Operational Research
      
      Actions_Allow_Unsecure_Commands: true
      Create_Release: ${{ (matrix.configuration == 'Release') && (startsWith(github.ref, 'refs/tags/v')) }}

    # Checkout the code
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Parse version tag, if present
    - name: Get tag
      id: tag
      if: ${{ env.Create_Release == 'true' }}
      uses: dawidd6/action-get-tag@v1
      with:
        strip_v: true

    # Use version tag if present and '1.0.0.0' if not present
    - name: Detect version
      id: version
      run: |
        Write-Output "version=$Env:v" >> $Env:GITHUB_OUTPUT
        $file_name = "OperationalResearchWAP_" + $Env:v + "_${{ matrix.platform }}"
        $full_path = "$Env:msix_path\" + $file_name + "_Test\" + $file_name + ".msix"
        Write-Output "Msix_File_Name=$full_path" >> $Env:GITHUB_OUTPUT
      env: 
        v: ${{ (env.Create_Release == 'true') && steps.tag.outputs.tag ||  '1.0.0.0'  }}
        msix_path: ${{ env.Wap_Project_Directory }}\${{ env.App_Packages_Directory }}

    # Extract repo name to use it in manifest
    - name: Get repo name for the manifest
      id: repo_name
      uses: MariachiBear/get-repo-name-action@v1.1.0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    # Update manifest with version and repo info
    - name: Update manifest version
      if: steps.version.outputs.version != ''
      run: |
        [xml]$manifest = get-content ".\$env:Wap_Project_Directory\Package.appxmanifest"
        $manifest.Package.Identity.Version = "${{ steps.version.outputs.version }}"
        $manifest.Package.Identity.Name = "${{ github.repository_owner }}.${{ steps.repo_name.outputs.repository-name }}"
        $manifest.Package.Identity.Publisher = "${{ github.repository_owner }}"
        $manifest.Package.Properties.DisplayName = "${{ env.Msix_Package_Display_Name }}"
        $manifest.Package.Applications.Application.VisualElements.DisplayName = "${{ env.Msix_Package_Display_Name }}"
        $manifest.save(".\$env:Wap_Project_Directory\Package.appxmanifest")

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test $env:Test_Project_Path

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: ${{ matrix.configuration }}
        RuntimeIdentifier: win-${{ matrix.platform }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package (${{ matrix.configuration }} ${{ matrix.platform }})
      run: msbuild $env:Solution_Name /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Never # Always/Never
        Appx_Package_Build_Mode: SideLoadOnly # CI/StoreUpload/SideLoadOnly
        Configuration: ${{ matrix.configuration }}
        TargetPlatform: ${{ matrix.platform }}
        AppInstallerUri: ${{ github.server_url }}/${{ github.repository_owner }}/${{ steps.repo_name.outputs.repository-name }}/releases/latest
        GenerateAppInstallerFile: True

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Compress the archive to upload it later
    - name: Create archive
      run: Compress-Archive -Path $env:Wap_Project_Directory\$env:App_Packages_Directory\* -DestinationPath $env:Wap_Project_Directory\$env:App_Packages_Directory\$env:App_Packages_Archive
      env:
        App_Packages_Archive: ${{ matrix.configuration }}-${{ matrix.platform }}.zip

    # Upload artifacts
    - name: Upload Package artifact
      uses: actions/upload-artifact@v4
      if: matrix.configuration == 'Release'
      with:
        name: ${{ matrix.platform }} Package
        path: ${{ env.Wap_Project_Directory }}\${{ env.App_Packages_Directory }}\${{ env.App_Packages_Archive }}
        overwrite: true
        if-no-files-found: error
    
    - name: Upload Installer artifact
      uses: actions/upload-artifact@v4
      if: matrix.configuration == 'Release'
      with:
        name: ${{ matrix.platform }} Installer
        path: ${{ steps.version.outputs.Msix_File_Name }}
        overwrite: true
        if-no-files-found: error

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Parse version tag, if present
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true

      # Download all the artifacts (already unzips them)
      - name: Download artifacts
        id: artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./assets/
          merge-multiple: true

      # Create the actual release
      - name: Create Release ${{ steps.tag.outputs.tag }}
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release v${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false
          body: |
            Version ${{ steps.tag.outputs.tag }} is here
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload release assets
      - name: Upload installer to Release  ${{ steps.tag.outputs.tag }}
        uses: AButler/upload-release-assets@v3.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-id: ${{ steps.create_release.outputs.id }}
          files: ./assets/*.msix
