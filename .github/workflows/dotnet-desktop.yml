# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    tags:
      - "v*"
    branches:
      - master

jobs:

  build:
    name: Build, test and release

    # Run only if we have new tags
    # if: github.ref == 'refs/heads/master'

    permissions:
      contents: write
    strategy:
      matrix:
        configuration: [Debug, Release]
        platform: [x86, x64]

    runs-on: windows-latest
    
    env:
      Solution_Name: .\OperationalResearch.sln
      Test_Project_Path: .\OperationalResearchTest\OperationalResearchTest.csproj
      Wap_Project_Directory: .\OperationalResearchWAP
      Wap_Project_Path: .\OperationalResearchWAP\OperationalResearchWAP.wapproj

      App_Packages_Directory: AppPackages
      App_Packages_Archive: ${{ matrix.configuration }}-${{ matrix.platform }}.zip
      
      # MsixPackageId: Richie314.OperationalResearch
      # MsixPublisherId: CN=Richie314
      MsixPackageDisplayName: Operational Research
      
      Actions_Allow_Unsecure_Commands: true
      Create_Release: ${{ (startsWith(github.ref, 'refs/tags/v')) }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get tag
      id: version
      if: ${{ (env.Create_Release == true) }}
      uses: dawidd6/action-get-tag@v1
      with:
        strip_v: true

    - name: Get repo name for the manifest
      id: repo_name
      uses: MariachiBear/get-repo-name-action@v1.1.0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    
    - name: Update manifest version
      if: ${{ (env.Create_Release == true) }}
      run: |
        [xml]$manifest = get-content ".\$env:Wap_Project_Directory\Package.appxmanifest"
        $manifest.Package.Identity.Version = "${{ steps.version.outputs.tag }}"
        $manifest.Package.Identity.Name = "${{ github.repository_owner }}.${{ steps.repo_name.outputs.repository-name }}"
        $manifest.Package.Identity.Publisher = "${{ github.repository_owner }}"
        $manifest.Package.Properties.DisplayName = "${{ env.MsixPackageDisplayName }}"
        $manifest.Package.Applications.Application.VisualElements.DisplayName = "${{ env.MsixPackageDisplayName }}"
        $manifest.save(".\$env:Wap_Project_Directory\Package.appxmanifest")

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test $env:Test_Project_Path

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: ${{ matrix.configuration }}
        RuntimeIdentifier: win-${{ matrix.platform }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package (${{ matrix.configuration }} ${{ matrix.platform }})
      run: msbuild $env:Solution_Name /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Never # Always
        Appx_Package_Build_Mode: SideLoadOnly # CI/StoreUpload/SideLoadOnly
        Configuration: ${{ matrix.configuration }}
        TargetPlatform: ${{ matrix.platform }}
        AppInstallerUri: ${{ github.server_url }}/${{ github.repository_owner }}/${{ steps.repo_name.outputs.repository-name }}/releases/latest
        GenerateAppInstallerFile: True

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    - name: Create archive
      run: Compress-Archive -Path $env:Wap_Project_Directory\$env:App_Packages_Directory\* -DestinationPath $env:Wap_Project_Directory\$env:App_Packages_Directory\$env:App_Packages_Archive
      env:
        App_Packages_Archive: ${{ matrix.configuration }}-${{ matrix.platform }}.zip

    - name: Upload Package artifact
      uses: actions/upload-artifact@v4
      if: matrix.configuration == 'Release'
      with:
        name: ${{ env.App_Packages_Archive }}
        path: ${{ env.Wap_Project_Directory }}\${{ env.App_Packages_Directory }}\${{ env.App_Packages_Archive }}
        overwrite: true
        if-no-files-found: error

    - name: Upload Installer artifact
      uses: actions/upload-artifact@v4
      if: matrix.configuration == 'Release'
      with:
        path: ${{ env.Wap_Project_Directory }}\${{ env.App_Packages_Directory }}\OperationalResearchWAP_1.0.0.0_${{ matrix.platform }}_Test\*.msix
        overwrite: true
        if-no-files-found: error

    # Create a Release if version tags were passed
    - name: Create Release
      id: create_release
      if: ${{ (matrix.configuration == 'Release') && (env.Create_Release == true) }}
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}.${{ matrix.configuration }}.${{ matrix.platform }}
        release_name: ${{ matrix.configuration }} ${{ github.ref }} ${{ matrix.platform }}
        draft: false
        prerelease: false
        body: |
          Version ${{ github.ref }} is here
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    # Upload release asset:   https://github.com/actions/upload-release-asset
    - name: Update release asset
      id: upload-release-asset
      if: ${{ (matrix.configuration == 'Release') && (env.Create_Release == true) }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.Wap_Project_Directory }}\${{ env.App_Packages_Directory }}\${{ env.App_Packages_Archive }}
        asset_name: ${{ env.App_Packages_Archive }}
        asset_content_type: application/zip


