# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    tags:
      - "v*"
    branches:
      - master

jobs:

  build:
    name: Build, test and release

    # Run only if we have new tags
    # if: github.ref == 'refs/heads/master'

    permissions:
      contents: write
    strategy:
      matrix:
        configuration: [Debug, Release] # [Release]

    runs-on: windows-latest
    
    env:
      Solution_Name: .\OperationalResearch.sln
      Test_Project_Path: .\OperationalResearchTest\OperationalResearchTest.csproj
      Wap_Project_Directory: .\OperationalResearchWAP
      Wap_Project_Path: .\OperationalResearchWAP\OperationalResearchWAP.wapproj
      Create_Release: ${{ startsWith(github.ref, 'refs/tags/v') }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test $env:Test_Project_Path

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Never
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: SideLoadOnly # CI/StoreUpload/SideLoadOnly
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Create a Release if version tags were passed
    - name: Create Release
      id: create_release
      if: ${{ matrix.configuration == 'Release' }} && ${{ env.Create_Release }}
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          Release notes for ${{ github.ref }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    # Upload the artifacts to the newly created release 
    - name: Upload artifacts and release assets
      uses: nanoufo/action-upload-artifacts-and-release-assets@v2
      if: ${{ matrix.configuration == 'Release' }}
      with:
        path: |
          ${{ env.Wap_Project_Directory }}\AppPackages\*.msix
        upload-release-files: ${{ env.Create_Release }}
        release-upload-url: ${{ steps.create_release.outputs.upload_url }}
        if-no-files-found: 'error'
        compression-level: 4

